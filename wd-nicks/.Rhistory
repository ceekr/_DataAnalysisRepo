wVector <- genTargetFunc()
## Get the training data set N=NSampleSize using a above particular target function
trainDataSet <- genTrainDataSet(w=wVector, N=NSampleSize)
## Now, I am going to create a set of hypothesis h(x) = sign(w*x)
## Remember that x is an input vector of d-dimension, which in this case d=2.
## We have generated a set of N data from a target function.
## We will use that data set to train our hypothesis and random weights to begin with
eInList <- runPerceptron(data=trainDataSet, iteration=NExp)
## Return missclassified points
return (eInList)
}
## This will run the above experiment NExp number of times
repeatRunTest <- function(NSampleSize, NExp){
print("miss-classification Error List...")
runTest(NSampleSize=NSampleSize, NExp=NExp)
}
repeatRunTest(NSampleSize=100, NExp=10)
eList <- repeatRunTest(NSampleSize=100, NExp=10)
class(eList)
eList
mean(eList)
eList <- repeatRunTest(NSampleSize=100, NExp=100)
mean(eList)
eList <- repeatRunTest(NSampleSize=100, NExp=1000)
mean(eList)
## This will run the above experiment NExp number of times
repeatRunTest <- function(NSampleSize, NExp){
eList <- runTest(NSampleSize=NSampleSize, NExp=NExp)
return(mean(eList))
}
repeatRunTest(NSampleSize=100, NExp=100)
repeatRunTest(NSampleSize=100, NExp=10)
## This will run the above experiment NExp number of times
repeatRunTest <- function(NSampleSize, NExp){
print("Mean Classification Error...")
eList <- runTest(NSampleSize=NSampleSize, NExp=NExp)
return(mean(eList))
}
repeatRunTest(NSampleSize=100, NExp=10)
## This is the perceptron learning algorithm
runPerceptron <- function(data, iteration){
missClassDataSet <- data.frame(y=numeric(), h_x=numeric(), EIn=numeric())
missClassList <- c()
eInList <- c()
## Start with any random weight between -1 and 1 -
## This initial choice will define the learning rate (Andrew NG)
wHyp <- c(runif(3, -1, 1))
## wHyp <- c(0,0,0)
## print("The random starting weights...")
## print(wHyp)
## Now run iterations on the data
for (i in 1:iteration){
## Start with a clean slate - reset the Miss classified data frame
missClassDataSet <- c()
## For each iteration, apply the hypothesis to every row in the data set
for (i in 1:nrow(data)){
hOut <- sign(wHyp[1]*data$x_0[i] + wHyp[2]*data$x_1[i] + wHyp[3]*data$x_2[i])
## Check if the data is missclassfied with the given weights
ErrIn <- abs(x=(hOut - data$y[i])) ## Take the absolute difference, as they bounce around
missClassDataSet <- rbind(missClassDataSet, data.frame(y=data$y[i], h_x=hOut, EIn=ErrIn))
}
## After applying a given hypothesis to data set D once, check for missclassification
missClassList <- which(missClassDataSet$EIn == 2)
eInList <- c(eInList, length(missClassList)/nrow(missClassDataSet))
## Take a random sample from the miss classified list ONLY IF there are errors reported
if (length(missClassList)!=0){
## Then get a sample from the list
sampleIndex <- sample(x=missClassList, size=1)
## Then use this sample to correct the weights
wHyp <- wHyp + data$y[sampleIndex]*c(data$x_0[sampleIndex], data$x_1[sampleIndex], data$x_2[sampleIndex])
## print("Adjusted weights are...")
## print(wHyp)
}
## Return the list of missclassification errors - EIn
return (eInList)
}
repeatRunTest(NSampleSize=100, NExp=10)
repeatRunTest(NSampleSize=100, NExp=1)
repeatRunTest(NSampleSize=100, NExp=10)
repeatRunTest(NSampleSize=100, NExp=100)
repeatRunTest(NSampleSize=100, NExp=1000)
repeatRunTest(NSampleSize=100, NExp=10000)
## Run Regression on the generated data set
runRegression <- function(data){
linModel <- lm(formula=data$y ~ data[1] + data[2] + data[3], data=data)
return(linModel)
}
wVector <- genTargetFunc()
trainDataSet <- genTrainDataSet(w=wVector, N=NSampleSize)
trainDataSet <- genTrainDataSet(w=wVector, N=100)
trainDataSet
linModel <- runRegression(data=trainDataSet)
## Run Regression on the generated data set
runRegression <- function(data){
linModel <- lm(formula=data$y ~ data$x_0 + data$x_1 + data$x_2, data=data)
return(linModel)
}
wVector <- genTargetFunc()
trainDataSet <- genTrainDataSet(w=wVector, N=100)
trainDataSet
linModel <- runRegression(data=trainDataSet)
linModel
## Run Regression on the generated data set
runRegression <- function(data){
linModel <- lm(formula=data$y ~ data$x_1 + data$x_2, data=data)
return(linModel)
}
linModel <- runRegression(data=trainDataSet)
linModel
summary(linModel)
linModel$residuals
mean(linModel$residuals)
linModel$coefficients
linModel$terms
setwd("E:/RWorkspace/wd-nicks")
LSAT = c(576,635,558,578,666,580,555,661,651,605,653,575,545,572,594)
GPA = c(3.39,3.3,2.81,3.03,3.44,3.07,3,3.43,3.36,3.13,3.12,2.74,2.76,2.88,2.96)
plot(LSAT, GPA)
cor(LSAT, GPA)
indVec = 1:length(GPA)
#Correlation CI
#Data
LSAT = c(576,635,558,578,666,580,555,661,651,605,653,575,545,572,594)
GPA = c(3.39,3.3,2.81,3.03,3.44,3.07,3,3.43,3.36,3.13,3.12,2.74,2.76,2.88,2.96)
plot(LSAT, GPA)
#Find correlation
cor(LSAT, GPA)
#Confidence interval around r
#Basic idea: pick pairs (with replacement)
#How? Index vector!
indVec = 1:length(GPA)
fix(indVec)
?rep
z = rep(NA, iter)
iter = 10000
z = rep(NA, iter)
z
indVecShuf = sample(indVec, length(indVec), replace=TRUE)
indVecShuf
psLSAT = LSAT[indVecShuf]
psLSAT
length(LSAT)
length(GPA)
estPearsonCor <- cor(x=X, y=Y)
indexVec <- 1:length(X)
## 10000 bootstrapped samples counter
iteration <= 10000
## This vector will contain the bootstrapped Pearsons r
bootPears <- rep(NA, iteration)
for(i in iteration){
## Resample keeping the pairing intact
indexVecShuffled <- sample(x=indexVec, size=length(indexVec), replace=T)
## Now you have a vector that contains random sample indexes - use that to pick the pairs
XReSample <- X[indexVecShuffled]
YReSample <- Y[indexVecShuffled]
## Now that we have pair wise X and Y, calculate Cor
bootPears[i] <- cor(x=X, y=Y, method="pearson") ## Although the method value is default
}
dataset4 <- read.csv(file="E:/RWorkspace/wd-nicks/code/m200-hw2/dataset4.csv")
## Extract the Column vetcor
X <- dataset4$X163
Y <- dataset4$X66
dataset4 <- read.csv(file="E:/RWorkspace/wd-nicks/code/m200-hw2/dataset4.csv")
dataset3 <- read.csv(file="E:/RWorkspace/wd-nicks/data/dataset3.csv")
dataset4 <- read.csv(file="E:/RWorkspace/wd-nicks/data/dataset4.csv")
## Extract the Column vetcor
X <- dataset4$X163
Y <- dataset4$X66
estPearsonCor <- cor(x=X, y=Y)
indexVec <- 1:length(X)
## 10000 bootstrapped samples counter
iteration <= 10000
## This vector will contain the bootstrapped Pearsons r
bootPears <- rep(NA, iteration)
for(i in iteration){
## Resample keeping the pairing intact
indexVecShuffled <- sample(x=indexVec, size=length(indexVec), replace=T)
## Now you have a vector that contains random sample indexes - use that to pick the pairs
XReSample <- X[indexVecShuffled]
YReSample <- Y[indexVecShuffled]
## Now that we have pair wise X and Y, calculate Cor
bootPears[i] <- cor(x=X, y=Y, method="pearson") ## Although the method value is default
}
estPearsonCor <- cor(x=X, y=Y)
indexVec <- 1:length(X)
## 10000 bootstrapped samples counter
iteration <- 10000
## This vector will contain the bootstrapped Pearsons r
bootPears <- rep(NA, iteration)
for(i in iteration){
## Resample keeping the pairing intact
indexVecShuffled <- sample(x=indexVec, size=length(indexVec), replace=T)
## Now you have a vector that contains random sample indexes - use that to pick the pairs
XReSample <- X[indexVecShuffled]
YReSample <- Y[indexVecShuffled]
## Now that we have pair wise X and Y, calculate Cor
bootPears[i] <- cor(x=X, y=Y, method="pearson") ## Although the method value is default
}
#Find confidence interval
quantile(bootPears, c(0.025, 0.975)) ## My previous method was admittedlt crude!
bootPears
estPearsonCor <- cor(x=X, y=Y)
indexVec <- 1:length(X)
## 10000 bootstrapped samples counter
iteration <- 10000
## This vector will contain the bootstrapped Pearsons r
bootPears <- rep(NA, iteration)
for(i in 1:iteration){
## Resample keeping the pairing intact
indexVecShuffled <- sample(x=indexVec, size=length(indexVec), replace=T)
## Now you have a vector that contains random sample indexes - use that to pick the pairs
XReSample <- X[indexVecShuffled]
YReSample <- Y[indexVecShuffled]
## Now that we have pair wise X and Y, calculate Cor
bootPears[i] <- cor(x=X, y=Y, method="pearson") ## Although the method value is default
}
#Find confidence interval
quantile(bootPears, c(0.025, 0.975)) ## My previous method was admittedlt crude!
bootPears
bootPears <- rep(NA, iteration)
for(i in 1:iteration){
## Resample keeping the pairing intact
indexVecShuffled <- sample(x=indexVec, size=length(indexVec), replace=T)
## Now you have a vector that contains random sample indexes - use that to pick the pairs
XReSample <- X[indexVecShuffled]
YReSample <- Y[indexVecShuffled]
## Now that we have pair wise X and Y, calculate Cor
bootPears[i] <- cor(x=XReSample, y=YReSample, method="pearson") ## Although the method value is default
}
#Find confidence interval
quantile(bootPears, c(0.025, 0.975)) ## My previous method was admittedlt crude!
estPearsonCor <- round(as.numeric(names(table(cor(x=dataset4, method="pearson", use="everything")))[1]), 4)
## Generating Bootstrapped samples of the dataset4 - Remember integrity of pairs are maintained
bootPairs <- lapply(X=1:10000, FUN=function(x){dataset4[sample(x=nrow(dataset4), size=49, replace=T),]})
## Now for EACH bootstrapped sample, consisting of 49 pairs, calculate the Pearson's r
bootPears <- sapply(X=bootPairs, FUN=cor, method="pearson")
bootPearsTbl <- table(bootPears)
bootPears1 <- c()
## Then extract the r values for each sample - DO NOT LIKE THIS, but have no handy solution for now
for (i in 1:10000){
bootPears1 <- c(bootPears1, as.numeric(names(bootPearsTbl[i])))
}
## Now we have the Pearson's r for each sample. So plot the distribution of the r
hist(x=bootPears1, breaks=50)
## Now sort the boot Pearsons
sortedBootPearsons <- sort(bootPears1)
loPearsonCor <- round(sortedBootPearsons[250], 4)
hiPearsonCor <- round(sortedBootPearsons[9750], 4)
print(paste("The PEARSON's r, with 95% confidence interval, is: ", estPearsonCor, ", (", loPearsonCor, ", ", hiPearsonCor, ")"))
quantile(bootPears, c(0.025, 0.975))
class(quantile(bootPears, c(0.025, 0.975)))
quantile(bootPears, c(0.025, 0.975))[1]
unnames(quantile(bootPears, c(0.025, 0.975))[1])
unname(quantile(bootPears, c(0.025, 0.975))[1])
estPearsonCor <- cor(x=X, y=Y)
indexVec <- 1:length(X)
## 10000 bootstrapped samples counter
iteration <- 10000
## This vector will contain the bootstrapped Pearsons r
bootPears <- rep(NA, iteration)
for(i in 1:iteration){
## Resample keeping the pairing intact
indexVecShuffled <- sample(x=indexVec, size=length(indexVec), replace=T)
## Now you have a vector that contains random sample indexes - use that to pick the pairs
XReSample <- X[indexVecShuffled]
YReSample <- Y[indexVecShuffled]
## Now that we have pair wise X and Y, calculate Cor
bootPears[i] <- cor(x=XReSample, y=YReSample, method="pearson") ## Although the method value is default
}
#Find confidence interval (Quantile will auto sort the list - unlike my approach #1)
## quantile(bootPears, c(0.025, 0.975)) ## My previous method was admittedlt crude!
loPearsonCor <- unname(quantile(bootPears, c(0.025, 0.975))[1])
hiPearsonCor <- unname(quantile(bootPears, c(0.025, 0.975))[2])
## Now we have the Pearson's r for each sample. So plot the distribution of the r
hist(x=bootPears1, breaks=50)
print(paste("The PEARSON's r, with 95% confidence interval, is: ", estPearsonCor, ", (", loPearsonCor, ", ", hiPearsonCor, ")"))
estPearsonCor <- round(x=cor(x=X, y=Y), digits=4)
indexVec <- 1:length(X)
## 10000 bootstrapped samples counter
iteration <- 10000
## This vector will contain the bootstrapped Pearsons r
bootPears <- rep(NA, iteration)
for(i in 1:iteration){
## Resample keeping the pairing intact
indexVecShuffled <- sample(x=indexVec, size=length(indexVec), replace=T)
## Now you have a vector that contains random sample indexes - use that to pick the pairs
XReSample <- X[indexVecShuffled]
YReSample <- Y[indexVecShuffled]
## Now that we have pair wise X and Y, calculate Cor
bootPears[i] <- cor(x=XReSample, y=YReSample, method="pearson") ## Although the method value is default
}
#Find confidence interval (Quantile will auto sort the list - unlike my approach #1)
## quantile(bootPears, c(0.025, 0.975)) ## My previous method was admittedlt crude!
loPearsonCor <- round(x=unname(quantile(bootPears, c(0.025, 0.975))[1]), digits=4)
hiPearsonCor <- round(x=unname(quantile(bootPears, c(0.025, 0.975))[2]), digits=4)
## Now we have the Pearson's r for each sample. So plot the distribution of the r
hist(x=bootPears1, breaks=50)
print(paste("The PEARSON's r, with 95% confidence interval, is: ", estPearsonCor, ", (", loPearsonCor, ", ", hiPearsonCor, ")"))
estPearsonCor <- round(as.numeric(names(table(cor(x=dataset4, method="pearson", use="everything")))[1]), 4)
## Generating Bootstrapped samples of the dataset4 - Remember integrity of pairs are maintained
bootPairs <- lapply(X=1:10000, FUN=function(x){dataset4[sample(x=nrow(dataset4), size=49, replace=T),]})
## Now for EACH bootstrapped sample, consisting of 49 pairs, calculate the Pearson's r
bootPears <- sapply(X=bootPairs, FUN=cor, method="pearson")
bootPearsTbl <- table(bootPears)
bootPears1 <- c()
## Then extract the r values for each sample - DO NOT LIKE THIS, but have no handy solution for now
for (i in 1:10000){
bootPears1 <- c(bootPears1, as.numeric(names(bootPearsTbl[i])))
}
## Now we have the Pearson's r for each sample. So plot the distribution of the r
hist(x=bootPears1, breaks=50)
## Now sort the boot Pearsons
sortedBootPearsons <- sort(bootPears1)
loPearsonCor <- round(sortedBootPearsons[250], 4)
hiPearsonCor <- round(sortedBootPearsons[9750], 4)
print(paste("The PEARSON's r, with 95% confidence interval, is: ", estPearsonCor, ", (", loPearsonCor, ", ", hiPearsonCor, ")"))
#Find confidence interval (Quantile will auto sort the list - unlike my approach #1)
## quantile(bootPears, c(0.025, 0.975)) ## My previous method was admittedlt crude!
loPearsonCor <- round(x=unname(quantile(bootPears, c(0.025, 0.975))[1]), digits=4)
hiPearsonCor <- round(x=unname(quantile(bootPears, c(0.025, 0.975))[2]), digits=4)
## Now we have the Pearson's r for each sample. So plot the distribution of the r
hist(x=bootPears, breaks=50)
print(paste("The PEARSON's r, with 95% confidence interval, is: ", estPearsonCor, ", (", loPearsonCor, ", ", hiPearsonCor, ")"))
estSpearmanCor <- round(x=cor(x=X, y=Y, method="spearman", use="everything"), digits=4)
indexVec <- 1:length(X)
## 10000 bootstrapped samples counter
iteration <- 10000
## This vector will contain the bootstrapped Pearsons r
bootSpears <- rep(NA, iteration)
for(i in 1:iteration){
## Resample keeping the pairing intact
indexVecShuffled <- sample(x=indexVec, size=length(indexVec), replace=T)
## Now you have a vector that contains random sample indexes - use that to pick the pairs
XReSample <- X[indexVecShuffled]
YReSample <- Y[indexVecShuffled]
## Now that we have pair wise X and Y, calculate Cor
bootSpears[i] <- cor(x=XReSample, y=YReSample, method="spearman", use="everything")
}
#Find confidence interval (Quantile will auto sort the list - unlike my approach #1)
loSpearmanCor <- round(x=unname(quantile(bootSpears, c(0.025, 0.975))[1]), digits=4)
hiPearsonCor <- round(x=unname(quantile(bootSpears, c(0.025, 0.975))[2]), digits=4)
## Now we have the Pearson's r for each sample. So plot the distribution of the r
hist(x=bootSpears, breaks=50)
print(paste("The PEARSON's r, with 95% confidence interval, is: ", estPearsonCor, ", (", loPearsonCor, ", ", hiPearsonCor, ")"))
########################## Computing the Spearman correlation - APPROACH #2 ########################
estSpearmanCor <- round(x=cor(x=X, y=Y, method="spearman", use="everything"), digits=4)
indexVec <- 1:length(X)
## 10000 bootstrapped samples counter
iteration <- 10000
## This vector will contain the bootstrapped Pearsons r
bootSpears <- rep(NA, iteration)
for(i in 1:iteration){
## Resample keeping the pairing intact
indexVecShuffled <- sample(x=indexVec, size=length(indexVec), replace=T)
## Now you have a vector that contains random sample indexes - use that to pick the pairs
XReSample <- X[indexVecShuffled]
YReSample <- Y[indexVecShuffled]
## Now that we have pair wise X and Y, calculate Cor
bootSpears[i] <- cor(x=XReSample, y=YReSample, method="spearman", use="everything")
}
#Find confidence interval (Quantile will auto sort the list - unlike my approach #1)
loSpearmanCor <- round(x=unname(quantile(bootSpears, c(0.025, 0.975))[1]), digits=4)
hiSpearmanCor <- round(x=unname(quantile(bootSpears, c(0.025, 0.975))[2]), digits=4)
## Now we have the Pearson's r for each sample. So plot the distribution of the r
hist(x=bootSpears, breaks=50)
print(paste("The Spearman's correlation, with 95% confidence interval, is: ", estSpearmanCor, ", (", loSpearmanCor, ", ", hiSpearmanCor, ")"))
## Computing the Spearman correlation
estSpearmanCor <- round(as.numeric(names(table(cor(x=dataset4, method="spearman", use="everything")))[1]), 4)
## Generating Bootstrapped samples of the dataset4 - Remember integrity of pairs are maintained
bootPairs <- lapply(X=1:10000, FUN=function(x){dataset4[sample(x=nrow(dataset4), size=49, replace=T),]})
## Now for EACH bootstrapped sample, consisting of 49 pairs, calculate the Spearman's corr
bootSpears <- sapply(X=bootPairs, FUN=cor, method="spearman")
bootSpearsTbl <- table(bootSpears)
bootSpears1 <- c()
## Then extract the r values for each sample - DO NOT LIKE THIS, but have no handy solution for now
for (i in 1:10000){
bootSpears1 <- c(bootSpears1, as.numeric(names(bootSpearsTbl[i])))
}
## Now we have the Spearman's corr for each sample. So plot the distribution of the r
hist(x=bootSpears1, breaks=50)
## Now sort the boot Spearmans
sortedBootSpearmans <- sort(bootSpears1)
loSpearmanCor <- round(sortedBootSpearmans[250], 4)
hiSpearmanCor <- round(sortedBootSpearmans[9750], 4)
print(paste("The SPEARMAN's corr, with 95% confidence interval, is: ", estSpearmanCor, ", (", loSpearmanCor, ", ", hiSpearmanCor, ")"))
## Bootstrapping the randomizd pairings
indexVec <- 1:length(X)
iteration <- 10000
## This vector will contain the bootstrapped Pearsons r
bootPears <- rep(NA, iteration)
for(i in 1:iteration){
## Resample RANDOMIZING the pairing this time
indexVecShuffled <- sample(x=indexVec, size=length(indexVec), replace=T)
XReSample <- X[indexVecShuffled]
## Randomize again, for different set of Ys
indexVecShuffled <- sample(x=indexVec, size=length(indexVec), replace=T)
YReSample <- Y[indexVecShuffled]
## Now, calculate the Pearson's r on randomized pairs
bootPears[i] <- cor(x=XReSample, y=YReSample, method="pearson")
}
#Find confidence interval (Quantile will auto sort the list - unlike my approach #1)
## quantile(bootPears, c(0.025, 0.975)) ## My previous method was admittedlt crude!
loPearsonCor <- round(x=unname(quantile(bootPears, c(0.025, 0.975))[1]), digits=4)
hiPearsonCor <- round(x=unname(quantile(bootPears, c(0.025, 0.975))[2]), digits=4)
## Now we have the Pearson's r for each sample. So plot the distribution of the r
hist(x=bootPears, breaks=50)
print(paste("The PEARSON's r, with 95% confidence interval, is: ", estPearsonCor, ", (", loPearsonCor, ", ", hiPearsonCor, ")"))
hist(x=bootPears, breaks=50)
bootPears
sort(bootPears)
head(sort(bootPears))
fix(bootPears)
class(bootPears)
bootPears[1:10]
bootPears[which(x=bootPears>0.44)]
length(bootPears)
length(bootPears[which(x=bootPears>estPearsonCor)])/length(bootPears)
pValue <- length(bootPears[which(x=bootPears>estPearsonCor)])/length(bootPears)
print(paste("The p-value for the estimated Pearson's correlation is:", pValue)
)
## Bootstrapping the randomizd pairings
indexVec <- 1:length(X)
iteration <- 10000
## This vector will contain the bootstrapped Pearsons r
bootSpears <- rep(NA, iteration)
for(i in 1:iteration){
## Resample RANDOMIZING the pairing this time
indexVecShuffled <- sample(x=indexVec, size=length(indexVec), replace=T)
XReSample <- X[indexVecShuffled]
## Randomize again, for different set of Ys
indexVecShuffled <- sample(x=indexVec, size=length(indexVec), replace=T)
YReSample <- Y[indexVecShuffled]
## Now, calculate the Pearson's r on randomized pairs
bootSpears[i] <- cor(x=XReSample, y=YReSample, method="spearman")
}
#Find confidence interval
loSpearmanCor <- round(x=unname(quantile(bootSpears, c(0.025, 0.975))[1]), digits=4)
hiSpearmanCor <- round(x=unname(quantile(bootSpears, c(0.025, 0.975))[2]), digits=4)
## Now we have the Pearson's r for each sample. So plot the distribution of the r
hist(x=bootSpears, breaks=50)
print(paste("The Spearman's correlation, with 95% confidence interval, is: ", estSpearmanCor, ", (", loSpearmanCor, ", ", hiSpearmanCor, ")"))
## So now the question is: How many times do we get r value equals or higher than our estimated Pearson's
## correlation r=0.44? Quanitfying this will provide the probability of this estimated r=0.44
pValue <- length(bootSpears[which(x=bootSpears>estSpearmanCor)])/length(bootSpears)
print(paste("The p-value for the estimated Spearman's correlation is:", pValue))
print("Since the p-value is much less than 5%, we DO NOT REJECT the null hypothesis")
########################## Computing the Spearman correlation - APPROACH #2 ########################
## This approach is borrowed from Jane's code.
estSpearmanCor <- round(x=cor(x=X, y=Y, method="spearman", use="everything"), digits=4)
## Bootstrapping the confidence interval
indexVec <- 1:length(X)
iteration <- 10000
## This vector will contain the bootstrapped Pearsons r
bootSpears <- rep(NA, iteration)
for(i in 1:iteration){
## Resample keeping the pairing intact
indexVecShuffled <- sample(x=indexVec, size=length(indexVec), replace=T)
## Now you have a vector that contains random sample indexes - use that to pick the pairs
XReSample <- X[indexVecShuffled]
YReSample <- Y[indexVecShuffled]
## Now that we have pair wise X and Y, calculate Cor
bootSpears[i] <- cor(x=XReSample, y=YReSample, method="spearman", use="everything")
}
#Find confidence interval (Quantile will auto sort the list - unlike my approach #1)
loSpearmanCor <- round(x=unname(quantile(bootSpears, c(0.025, 0.975))[1]), digits=4)
hiSpearmanCor <- round(x=unname(quantile(bootSpears, c(0.025, 0.975))[2]), digits=4)
## Now we have the Pearson's r for each sample. So plot the distribution of the r
hist(x=bootSpears, breaks=50)
print(paste("The Spearman's correlation, with 95% confidence interval, is: ", estSpearmanCor, ", (", loSpearmanCor, ", ", hiSpearmanCor, ")"))
## Bootstrapping the randomizd pairings
indexVec <- 1:length(X)
iteration <- 10000
## This vector will contain the bootstrapped Pearsons r
bootSpears <- rep(NA, iteration)
for(i in 1:iteration){
## Resample RANDOMIZING the pairing this time
indexVecShuffled <- sample(x=indexVec, size=length(indexVec), replace=T)
XReSample <- X[indexVecShuffled]
## Randomize again, for different set of Ys
indexVecShuffled <- sample(x=indexVec, size=length(indexVec), replace=T)
YReSample <- Y[indexVecShuffled]
## Now, calculate the Pearson's r on randomized pairs
bootSpears[i] <- cor(x=XReSample, y=YReSample, method="spearman")
}
#Find confidence interval
loSpearmanCor <- round(x=unname(quantile(bootSpears, c(0.025, 0.975))[1]), digits=4)
hiSpearmanCor <- round(x=unname(quantile(bootSpears, c(0.025, 0.975))[2]), digits=4)
## Now we have the Pearson's r for each sample. So plot the distribution of the r
hist(x=bootSpears, breaks=50)
print(paste("The Spearman's correlation, with 95% confidence interval, is: ", estSpearmanCor, ", (", loSpearmanCor, ", ", hiSpearmanCor, ")"))
## So now the question is: How many times do we get Spearman's correlaton value equals
## or higher than our estimated Spearmans's correlation of 0.4284?
## Quanitfying this will provide the probability of this estimated correlation
pValue <- length(bootSpears[which(x=bootSpears>estSpearmanCor)])/length(bootSpears)
print(paste("The p-value for the estimated Spearman's correlation is:", pValue))
print("Since the p-value is much less than 5%, we DO NOT REJECT the null hypothesis")
length(bootSpears[which(x=bootSpears>estSpearmanCor)])
length(bootSpears)
ength(bootPears[which(x=bootPears>estPearsonCor)])
hist(x=bootPears, breaks=50)
length(bootPears[which(x=bootPears>estPearsonCor)])
length(bootPears)
pValue <- length(bootPears[which(x=bootPears>estPearsonCor)])/length(bootPears)
print(paste("The p-value for the estimated Pearson's correlation is:", pValue))
print("Since the p-value is much less than 5%, we DO NOT REJECT the null hypothesis that r=0")
## Quanitfying this will provide the probability of this estimated correlation
pValue <- length(bootSpears[which(x=bootSpears>estSpearmanCor)])/length(bootSpears)
print(paste("The p-value for the estimated Spearman's correlation is:", pValue))
print("Since the p-value is much less than 5%, we DO NOT REJECT the null hypothesis")
pValue <- length(bootSpears[which(x=bootSpears>estSpearmanCor)])/length(bootSpears)
print(paste("The p-value for the estimated Spearman's correlation is:", pValue))
print("Since the p-value is much less than 5%, we DO NOT REJECT the null hypothesis")
